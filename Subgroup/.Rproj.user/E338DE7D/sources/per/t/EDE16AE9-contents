
eif <- function(an, delta, t_rx, r_x, mu) {

  q_r <- q.r(an, delta, r_x)
  v_x <- v.x(q_r, mu)

  tt <- an@data[[an@varn@tt]]
  R <- an@data[[an@varn@R]]
  Y <- an@data[[an@varn@Y]]

  p_r <- ifelse(R==1, r_x, 1-r_x)

  eifs <- list()
  tval <- 1
  for (tval in c(1, 0)) {
    p_t <- ifelse(tval == 1, t_rx, 1-t_rx)
    v_tx <- v_x[[glue("v_t{tval}")]]

    wt <- 1*(tt == tval) / bound(p_t)
    wt <- normalize(wt) %>% bound.ipw(., n = length(tt))
    wr <- q_r$qR / p_r
    w <- wt*wr

    eif_y <- w*(Y - mu$mu)
    eif_r <- w*(mu$mu - v_tx)
    eif_sum <- eif_y + eif_r + v_tx
    eifs[[glue("Y{tval}|Rq_delta{round(delta,1)}")]] <- eif_sum

  }

  eifs[[glue("ATE|Rq_delta{round(delta,1)}")]] <- eifs[[grep("Y1", names(eifs))]] - eifs[[grep("Y0", names(eifs))]]

  eifs
}

q.r <- function(an, delta, r_x) {

  R <- an@data[[an@varn@R]]
  r1_x <- r_x
  r0_x <- 1 - r1_x

  qr1 <- delta * r1_x / (delta * r1_x + r0_x)
  qr0 <- 1 - qr1

  q_r <- ifelse(R==1, qr1, qr0)

  list(qR = q_r, qr0 = qr0, qr1 = qr1)
}

v.x <- function(q_r, mu) {

  rvals <- c(0, 1)

  v_x <- list()
  for (tval in c(0, 1)) {

    v_x[[glue("v_t{tval}")]] <- lapply(rvals, \(rval) {
      mu[[glue("mu_t{tval}r{rval}")]] * q_r[[glue("qr{rval}")]]
    }) %>%
      Reduce(`+`, .)

  }
  v_x
}
