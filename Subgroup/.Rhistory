library(hal9001)
library(origami)
library(mvtnorm)
library(parallel)
library(tidyverse)
library(glue)
library(SuperLearner)
library(lightgbm)
library(earth)
n = 50
source("~/Library/CloudStorage/Box-Box/Labs/Subgroup/R_subgroup/simulation/fun_gendata.R")
library(parallel)
source("~/Library/CloudStorage/Box-Box/Labs/Subgroup/R_subgroup/simulation/sim.R")
Yfamily <- as.character(condition$Yfamily[cond])
Mfamily <- as.character(condition$Mfamily[cond])
interact <- as.logical(condition$interact[cond])
num_c <- condition$num_c[cond]
gen_data <- GenData(
sim.seed = datseeds[iseed],
n = condition$n[cond],
Mfamily = Mfamily,
Yfamily = Yfamily, # "binomial",
quadratic.R = condition$quadratic.R[cond],
quadratic.M = condition$quadratic.M[cond],
quadratic.Y = condition$quadratic.Y[cond],
interact = interact,
no_tt = FALSE,
num_c = num_c
)
data_in <- gen_data$datobs
source("~/Library/CloudStorage/Box-Box/Labs/Subgroup/R_subgroup/simulation/sim.R")
gen_data <- GenData(
sim.seed = datseeds[iseed],
n = condition$n[cond],
Mfamily = Mfamily,
Yfamily = Yfamily, # "binomial",
quadratic.R = condition$quadratic.R[cond],
quadratic.M = condition$quadratic.M[cond],
quadratic.Y = condition$quadratic.Y[cond],
interact = interact,
no_tt = FALSE,
num_c = num_c
)
source("~/Library/CloudStorage/Box-Box/Labs/Subgroup/R_subgroup/simulation/sim.R")
gen_data <- GenData(
sim.seed = datseeds[iseed],
n = condition$n[cond],
Mfamily = Mfamily,
Yfamily = Yfamily, # "binomial",
quadratic.R = condition$quadratic.R[cond],
quadratic.M = condition$quadratic.M[cond],
quadratic.Y = condition$quadratic.Y[cond],
interact = interact,
no_tt = FALSE,
num_c = num_c
)
data_in <- gen_data$datobs
gen_data <- GenData(
sim.seed = datseeds[iseed],
n = 300,
Mfamily = Mfamily,
Yfamily = Yfamily, # "binomial",
quadratic.R = condition$quadratic.R[cond],
quadratic.M = condition$quadratic.M[cond],
quadratic.Y = condition$quadratic.Y[cond],
interact = interact,
no_tt = FALSE,
num_c = num_c
)
data_in <- gen_data$datobs
w
delta
variables
install.packages("mlr3superlearner")
library(mlr3superlearner)
is_binary
q.r
q_r
install.packages("S7")
library(S7)
variables
analysis
an
source("~/Library/CloudStorage/Box-Box/Labs/Subgroup/R_subgroup/Subgroup/R/data_vars.R")
data=data_in
subgroup = "R"
treatment = "tt"
outcome = "Y"
data_in <- data %>%
rename(tt = all_of(treatment)) %>%
rename(R = all_of(subgroup)) %>%
rename(Y = all_of(outcome)) %>%
mutate(ttR = tt*R)
.f(data[1:2,], "tt")
`1`(data[1:2,], "tt")
data[[tt]] <-1
data[["tt"]] <-1
View(data)
data=data_in
data[, ttR] <- data[[tt]] * data[[R]]
data[, "ttR"] <- data[["tt"]] * data[["R"]]
c(0,0,1,1)->aa
c(0,0,1,1)->x
all(unique(x) %in% c(0,1))
if.binary <- function(x) {
if ( all(unique(x) %in% c(0,1)) ) {
TRUE
} else {
FALSE
}
}
if.binary(x)
source("~/Library/CloudStorage/Box-Box/Labs/Subgroup/R_subgroup/Subgroup/R/data_vars.R")
covariates=names(data[,c("C.1","C.2")])
source("~/Library/CloudStorage/Box-Box/Labs/Subgroup/R_subgroup/Subgroup/R/data_vars.R")
tt1 = 1
tt0 = 0
an <- analysis_data(
data = data_in,
varn = variables(
tt = "tt",
R = "R",
ttR = "ttR",
Y = outcome,
X = covariates
),
tt0 = tt0,
tt1 = tt1
)
devtools::load_all(".")
an <- analysis_data(
data = data_in,
varn = variables(
tt = "tt",
R = "R",
ttR = "ttR",
Y = outcome,
X = covariates
),
tt0 = tt0,
tt1 = tt1
)
devtools::load_all(".")
an <- analysis_data(
data = data_in,
varn = variables(
tt = "tt",
R = "R",
ttR = "ttR",
Y = outcome,
X = covariates
),
tt0 = tt0,
tt1 = tt1
)
source("~/Library/CloudStorage/Box-Box/Labs/Subgroup/R_subgroup/Subgroup/R/data_vars.R")
an <- analysis_data(
data = data_in,
varn = variables(
tt = "tt",
R = "R",
ttR = "ttR",
Y = outcome,
X = covariates
),
tt0 = tt0,
tt1 = tt1
)
interaction(data_in[,c("tt","R")])->aa
S
devtools::load_all(".")
an@varn@tt
cv_folds=2
folds <- make.fold_K(an@data, Snames = c(an@varn@tt, an@varn@R), cv_folds)
devtools::load_all(".")
folds <- make.fold_K(an@data, Snames = c(an@varn@tt, an@varn@R), cv_folds)
Snames = c(an@varn@tt, an@varn@R)
Snames
(cv_folds <=1)
(is.null(Snames))
(length(Snames)>1 )
data_in$S <- interaction(data_in[, Snames])
fold_K <- lapply(unique(data_in[["S"]]), FUN = function(k=1) {
data_in$K <- match(data_in[["S"]], unique(data_in[["S"]]))
if (nrow(data_in[data_in$K==k, ]) >= 1) {
fk <- origami::make_folds(data_in[data_in$K==k, ],
fold_fun = origami::folds_vfold,
V = cv_folds)
fold_k <- fk
v <- 1
for(v in 1:cv_folds) {
fold_k[[v]]$validation_set <- data_in$id[data_in$K==k][fk[[v]]$validation_set]
fold_k[[v]]$training_set <- data_in$id[data_in$K==k][fk[[v]]$training_set]
}
}
return(fold_k)
} )
data_in$K <- match(data_in[["S"]], unique(data_in[["S"]]))
k=1
nrow(data_in[data_in$K==k, ])
fk <- origami::make_folds(data_in[data_in$K==k, ],
fold_fun = origami::folds_vfold,
V = cv_folds)
fold_K <- lapply(unique(data_in[["S"]]), FUN = function(k=1) {
data_in$K <- match(data_in[["S"]], unique(data_in[["S"]]))
if (nrow(data_in[data_in$K==k, ]) >= 1) {
fk <- origami::make_folds(data_in[data_in$K==k, ],
fold_fun = origami::folds_vfold,
V = cv_folds)
fold_k <- fk
v <- 1
for(v in 1:cv_folds) {
fold_k[[v]]$validation_set <- data_in$id[data_in$K==k][fk[[v]]$validation_set]
fold_k[[v]]$training_set <- data_in$id[data_in$K==k][fk[[v]]$training_set]
}
}
return(fold_k)
} )
fk <- origami::make_folds(data_in[data_in$K==k, ],
fold_fun = origami::folds_vfold,
V = cv_folds)
fold_k <- fk
v <- 1
for(v in 1:cv_folds) {
fold_k[[v]]$validation_set <- data_in$id[data_in$K==k][fk[[v]]$validation_set]
fold_k[[v]]$training_set <- data_in$id[data_in$K==k][fk[[v]]$training_set]
}
fold_K <- lapply(unique(data_in[["S"]]), FUN = function(k=1) {
data_in$K <- match(data_in[["S"]], unique(data_in[["S"]]))
if (nrow(data_in[data_in$K==k, ]) >= 1) {
fk <- origami::make_folds(data_in[data_in$K==k, ],
fold_fun = origami::folds_vfold,
V = cv_folds)
fold_k <- fk
v <- 1
for(v in 1:cv_folds) {
fold_k[[v]]$validation_set <- data_in$id[data_in$K==k][fk[[v]]$validation_set]
fold_k[[v]]$training_set <- data_in$id[data_in$K==k][fk[[v]]$training_set]
}
}
return(fold_k)
} )
rm(fold_k)
fold_K <- lapply(unique(data_in[["S"]]), FUN = function(k=1) {
data_in$K <- match(data_in[["S"]], unique(data_in[["S"]]))
if (nrow(data_in[data_in$K==k, ]) >= 1) {
fk <- origami::make_folds(data_in[data_in$K==k, ],
fold_fun = origami::folds_vfold,
V = cv_folds)
fold_k <- fk
v <- 1
for(v in 1:cv_folds) {
fold_k[[v]]$validation_set <- data_in$id[data_in$K==k][fk[[v]]$validation_set]
fold_k[[v]]$training_set <- data_in$id[data_in$K==k][fk[[v]]$training_set]
}
}
return(fold_k)
} )
View(data)
View(data_in)
unique(data_in[["S"]])
unique(data_in$K)
fold_K <- lapply(unique(data_in$K), FUN = function(k=1) {
if (nrow(data_in[data_in$K==k, ]) >= 1) {
fk <- origami::make_folds(data_in[data_in$K==k, ],
fold_fun = origami::folds_vfold,
V = cv_folds)
fold_k <- fk
v <- 1
for(v in 1:cv_folds) {
fold_k[[v]]$validation_set <- data_in$id[data_in$K==k][fk[[v]]$validation_set]
fold_k[[v]]$training_set <- data_in$id[data_in$K==k][fk[[v]]$training_set]
}
}
return(fold_k)
} )
devtools::load_all(".")
folds <- make.fold_K(an@data, Snames = c(an@varn@tt, an@varn@R), cv_folds)
?Subgroup::incremental.inclusion
data(data)
?incremental.inclusion
?incremental.inclusion
?incremental.inclusion
data(data)
# specify model estimation methods
learners <- c("gam", "glm", "ranger")
# specify the increment odds ratio delta values
deltas <- c(1/10, 1/5, 1, 5, 10)
# run
out <- Subgroup::incremental.inclusion(
data = data,
subgroup = "R",
treatment = "tt",
outcome = "Y",
covariates = grep("^X", colnames(data), value = TRUE),
deltas = deltas,
learners = learners
)
?incremental.inclusion
?incremental.inclusion
?incremental.inclusion
library(origami)
library(tidyverse)
library(glue)
library(mlr3superlearner)
data(data)
# specify model estimation methods
learners <- c("gam", "glm", "ranger")
# specify the increment odds ratio delta values
deltas <- c(1/10, 1/5, 1, 5, 10)
# run
out <- Subgroup::incremental.inclusion(
data = data,
subgroup = "R",
treatment = "tt",
outcome = "Y",
covariates = grep("^X", colnames(data), value = TRUE),
deltas = deltas,
learners = learners
)
?incremental.inclusion
?incremental.inclusion
?incremental.inclusion
library(Subgroup)
?incremental.inclusion
?incremental.inclusion
library(origami)
library(tidyverse)
library(glue)
library(mlr3superlearner)
library(mlr3extralearners)
data(data)
# specify model estimation methods
learners <- c("gam", "glm", "ranger")
# specify the increment odds ratio delta values
deltas <- c(1/10, 1/5, 1, 5, 10)
# run
out <- Subgroup::incremental.inclusion(
data = data,
subgroup = "R",
treatment = "tt",
outcome = "Y",
covariates = grep("^X", colnames(data), value = TRUE),
deltas = deltas,
learners = learners
)
?incremental.inclusion
out$ATE_deltas
library(origami)
library(tidyverse)
library(glue)
library(mlr3superlearner)
library(mlr3extralearners)
data(data)
# specify model estimation methods
learners <- c("gam", "glm", "nnet")
# specify the increment odds ratio delta values
deltas <- c(1/10, 1/5, 1, 5, 10)
# run
out <- Subgroup::incremental.inclusion(
data = data,
subgroup = "R",
treatment = "tt",
outcome = "Y",
covariates = grep("^X", colnames(data), value = TRUE),
deltas = deltas,
learners = learners
)
